@using WebStore.Controllers
@using WebStore.Domain.ViewModels.BreadCrumbs

@{
    Layout = "_Layout";

    BreadCrumbType type = BreadCrumbType.None;
    if (Context.Request.Query.ContainsKey("SectionId"))
    {
        type = BreadCrumbType.Section;
    }
    else if (Context.Request.Query.ContainsKey("BrandId"))
    {
        type = BreadCrumbType.Brand;
    }
    else
    {
        type = BreadCrumbType.None;
    }

    if ((string)ViewContext.RouteData.Values["action"] == nameof(CatalogController.Details))
    {
        type = BreadCrumbType.Product;
    }

    var id = 0;
    var from_type = BreadCrumbType.Section;
    int parseId;

    switch (type)
    {
        default: throw new ArgumentOutOfRangeException();

        case BreadCrumbType.None: break;

        case BreadCrumbType.Section:
            if (int.TryParse(Context.Request.Query["SectionId"].ToString(), out parseId))
            {
                id = parseId;
            }
            break;
        case BreadCrumbType.Brand:
            if (int.TryParse(Context.Request.Query["BrandId"].ToString(), out parseId))
            {
                id = parseId;
            }
            break;
        case BreadCrumbType.Product:
            if (int.TryParse(ViewContext.RouteData.Values["id"].ToString(), out parseId))
            {
                id = parseId;
            }

            if (Context.Request.Query.ContainsKey("FromBrand"))
            {
                from_type = BreadCrumbType.Brand;
            }
            break;
    }
}

<vc:bread-crumbs type="@type" id="@id" from-type="@from_type" />

@RenderBody()

@section Styles
{
    @RenderSection("Styles", false)
}

@section Scripts
{
    @RenderSection("Scripts", false)
}
